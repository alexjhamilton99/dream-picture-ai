package auth

import (
  "dream-picture-ai/view/layout"

	"github.com/nedpals/supabase-go"
)

templ Login() {
  @layout.App(false) {
    <div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
      <div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
        <h1 class="text-center text-xl font-black mb-10">Login to Dream Picture AI</h1>
        @LoginForm(supabase.UserCredentials{}, LoginErrors{})
      </div>
    </div>
  }
}

templ SignUp() {
  @layout.App(false) {
    <div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
      <div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
        <h1 class="text-center text-xl font-black mb-10">Sign up to Dream Picture AI</h1>
        @SignUpForm(SignUpParams{}, SignUpErrors{})
      </div>
    </div>
  }
}

templ SignUpSuccess(email string) {
  <div>A confirmation email was sent to: <span class="font-semibold text-success">{email}</span></div>
}

type SignUpParams struct {
  Email string
  Password string
  ConfirmPassword string
}

type SignUpErrors struct {
   Email string
   Password string
   ConfirmPassword string
}

templ SignUpForm(params SignUpParams, errors SignUpErrors) {
  <form 
    hx-post="/sign-up"
    hx-swap="outerHTML"
    class="space-y-8"
  > 
    <div class="w-full">
      <div class="label">
        <span class="label-text">Email Address</span>
      </div>
      <input type="email" value={params.Email} name="email" required autocomplete="off" placeholder="Type email address..." class="input input-bordered w-full"/>
      if len(errors.Email) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Email}</span>
        </div>
        }
      <div class="label">
        <span class="label-text">Password</span>
      </div>
      <input type="password" name="password" required autocomplete="off" placeholder="Type password..." class="input input-bordered w-full"/>
      if len(errors.Password) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Password}</span>
        </div>
      }
      <div class="label">
        <span class="label-text">Confirm Password</span>
      </div>
      <input type="password" name="confirmPassword" required autocomplete="off" class="input input-bordered w-full"/>
      if len(errors.ConfirmPassword) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.ConfirmPassword}</span>
        </div>
      }
    </div>
    <button type="submit" class="btn btn-primary w-full">Login <i class="fa-solid fa-arrow-right"></i></button>
  </form> 
}

type LoginErrors struct {
  Email string
  Password string
  InvalidCredentials string
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
  <form 
    hx-post="/login"
    hx-swap="outerHTML"
    class="space-y-4"
  > 
    <div class="w-full">
      <div class="label">
        <span class="label-text">Email Address</span>
      </div>
      <input type="email" value={creds.Email} name="email" required autocomplete="off" placeholder="Type email address..." class="input input-bordered w-full"/>
      if len(errors.Email) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Email}</span>
        </div>
        }
      <div class="label">
        <span class="label-text">Password</span>
      </div>
      <input type="password" name="password" required autocomplete="off" placeholder="Type password..." class="input input-bordered w-full"/>
      if len(errors.Password) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Password}</span>
        </div>
      }
    </div>
    if len(errors.InvalidCredentials) > 0 {
      <div class="text-sm text-error">{errors.InvalidCredentials}</div>
    }
    <button type="submit" class="btn btn-primary w-full">Login <i class="fa-solid fa-arrow-right"></i></button>
    <div class="divider">OK</div>
    <a href="/login/providers/google" class="btn btn-outline w-full">Login with Google<i class="fa-brands fa-google"></i></a>
  </form> 
}

templ CallbackScript() {
  <script>
    var url = window.location.href;
    var newURL = url.replace('#', '?');
    window.location = newURL;
  </script>
}
